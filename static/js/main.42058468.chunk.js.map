{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","icon","faSun","color","faSnowflake","faWind","wind","speed","faStopwatch20","pressure","faGlasses","visibility","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0NAGMA,EACC,mCADDA,EAEE,2CA4HOC,MAxHf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KA+Bb,OACE,yBAAKC,UACqB,oBAAhBF,EAAQG,MACXH,EAAQG,KAAKC,MAAQ,GACvB,WACC,OACJ,8BACE,yBAAKF,UAAY,cACf,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAGT,EAASS,EAAEC,OAAOC,QAChCA,MAAOZ,EACPa,WAzCK,SAAAC,GACE,UAAZA,EAAIC,KACLC,MAAM,GAAD,OAAInB,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACzDoB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJjB,EAAWiB,GACXnB,EAAS,IACToB,QAAQC,IAAIF,UAoCa,oBAAhBlB,EAAQG,KAClB,6BACA,yBAAKD,UAAU,gBACZ,yBAAKA,UAAU,YACZF,EAAQqB,KADX,KACmBrB,EAAQsB,IAAIC,SAE/B,yBAAKrB,UAAU,QAnCL,SAACsB,GACnB,IAGIC,EAFO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAEjED,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GA2BvBE,CAAY,IAAIC,OAEjB,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,QACdiC,KAAKC,MAAMpC,EAAQG,KAAKC,MADzB,QAINJ,EAAQG,KAAKC,MAAQ,GACrB,kBAAC,IAAD,CACMF,UAAY,YACZmC,KAAMC,IAAOC,MAAM,WAAe,kBAAC,IAAD,CAClCrC,UAAY,YACZmC,KAAMG,IAAaD,MAAM,aAGzB,yBAAKrC,UAAU,WACdF,EAAQA,QAAQ,GAAGG,OAKtB,yBAAKD,UAAU,eACb,yBAAKA,UAAU,SACP,0CAGR,kBAAC,IAAD,CACAA,UAAY,QACZmC,KAAMI,IAAQF,MAAM,YAClBvC,EAAQ0C,KAAKC,MAPf,SAUF,yBAAKzC,UAAU,eACb,yBAAKA,UAAU,SACP,wCAGR,kBAAC,IAAD,CACCA,UAAY,QACbmC,KAAMO,IAAeL,MAAM,QAC1BvC,EAAQG,KAAK0C,SAPd,SAUF,yBAAK3C,UAAU,eACb,yBAAKA,UAAU,SACP,0CAGR,kBAAC,IAAD,CACCA,UAAY,QACbmC,KAAMS,IAAWP,MAAM,YACtBvC,EAAQ+C,WAPT,SAeF,MC/GQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.42058468.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSnowflake, faWind, faStopwatch20, faGlasses, faSun } from \"@fortawesome/free-solid-svg-icons\";\nconst api = {\n  key: \"692ba30b6629fd95773782e8874fbecc\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState('');\n\n  const search = evt=>{\n    if(evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => \n        {\n        setWeather(result);\n        setQuery('');  \n        console.log(result);\n    });\n     \n    }\n  }\n\n\nconst dateBuilder = (d) =>{\n  let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n  let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"];\n\n  let day = days[d.getDay()];\n  let date = d.getDate();\n  let month = months[d.getMonth()];\n  let year = d.getFullYear();\n\n  return `${day} ${date} ${month} ${year}`\n}\n\n  return (\n    <div className={\n      (typeof weather.main != \"undefined\")\n       ? ((weather.main.temp >= 17)\n       ? 'app warm' : 'app')\n        : 'app'}>\n      <main>\n        <div className = \"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"search...\"\n            onChange={e=> setQuery(e.target.value)}\n            value={query}\n            onKeyPress = {search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n       <div>\n       <div className=\"location-box\">\n          <div className=\"location\">\n            {weather.name}, {weather.sys.country}\n          </div>\n          <div className=\"date\">\n            {dateBuilder(new Date())}\n          </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n              {Math.round(weather.main.temp)}Â°C \n\n              {\n      ((weather.main.temp >= 17)\n       ?<FontAwesomeIcon \n              className = \"icon-spin\"\n              icon={faSun} color=\"yellow\" /> :  <FontAwesomeIcon \n              className = \"icon-spin\"\n              icon={faSnowflake} color=\"#00bcd4\" />)\n        }\n              </div>\n              <div className=\"weather\">\n              {weather.weather[0].main}\n              </div>\n            </div>\n\n            {/* weather Reports */}\n            <div className=\"weather-box\">\n              <div className=\"temp1\">\n                      <h3>\n                                                    Wind speed\n                      </h3>\n              <FontAwesomeIcon \n              className = \"icons\"\n              icon={faWind} color=\"#00bcd4\" />\n               {weather.wind.speed} mph\n              </div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp2\">\n                      <h3>\n                                                   Pressure\n                      </h3>\n              <FontAwesomeIcon \n               className = \"icons\"\n              icon={faStopwatch20} color=\"red\" />\n              {weather.main.pressure} hPa\n              </div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp2\">\n                      <h3>\n                                                   Visibility\n                      </h3>\n              <FontAwesomeIcon \n               className = \"icons\"\n              icon={faGlasses} color=\"#f0a500\" />\n              {weather.visibility} m\n              </div>\n            </div>\n           \n            \n              {/* weather Reports Ends */}\n          </div>\n       </div>\n       ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}